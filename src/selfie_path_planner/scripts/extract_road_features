#!/usr/bin/env python
'''
*Copyright ( c ) 2019, KNR Selfie
*This code is licensed under BSD license (see LICENSE for details)
'''

import rospy

from math import sqrt, atan, atan2, pi
import time
import numpy
from scipy.optimize import minimize
from visualization_msgs.msg import Marker
from numpy.polynomial.polynomial import Polynomial
from geometry_msgs.msg import Point
from visualization_msgs.msg import MarkerArray

from selfie_msgs.msg import RoadMarkings
from std_msgs.msg import Float64
from std_msgs.msg import Float32

from dynamic_reconfigure.server import Server
from selfie_path_planner.cfg import ExtractRoadFeaturesConfig

max_speed = 3.0
act_speed = 0.0

time_last_speed = time.time()

class StreamingMovingAverage:
    def __init__(self, window_size):
        self.window_size = window_size
        self.values = []
        self.sum = 0

    def process(self, value):
        self.values.append(value)
        self.sum += value
        if len(self.values) > self.window_size:
            self.sum -= self.values.pop(0)
        return float(self.sum) / len(self.values)

def road_markings_callback(msg):
    global sma
    global sma_x
    global sma_y
    global pub_speed
    global time_last_speed
    global act_speed
    c_poly = Polynomial(msg.center_line)

    # x - lookahead
    x_shifted = Polynomial([-lookahead, 1])

    c_poly_dist_sq = x_shifted**2 + c_poly**2

    c_x = max(lookahead, minimize(c_poly_dist_sq, lookahead).x[0])
    c_y = c_poly(c_x)

    c_dist = sqrt(c_poly_dist_sq(c_x))

    slope = c_poly.deriv()(c_x)
    theta = atan(slope)
    curvature = abs(c_poly.deriv().deriv()(c_x)) / (1+c_poly.deriv()(c_x)**2)**1.5
    if c_poly.deriv().deriv()(c_x) != 0:
        x = c_x - c_poly.deriv()(c_x) * (1 + c_poly.deriv()(c_x)**2) / c_poly.deriv().deriv()(c_x)
        y = c_y + (1 + c_poly.deriv()(c_x)**2) / c_poly.deriv().deriv()(c_x)

        x = sma_x.process(x)
        y = sma_y.process(y)

        marker = Marker()
        marker.header.frame_id = "/base_link"
        marker.type = marker.LINE_STRIP
        marker.action = marker.ADD
        marker.color.r = 1.0
        marker.color.g = 0.0
        marker.color.b = 0.0
        marker.color.a = 1.0

        marker.scale.x = 0.01
        marker.scale.y = 0.01

        # marker line points
        marker.points = []
        # first point
        first_line_point = Point()
        first_line_point.x = x
        first_line_point.y = y
        first_line_point.z = 0.0
        marker.points.append(first_line_point)
        # second point
        second_line_point = Point()
        second_line_point.x = c_x
        second_line_point.y = c_y
        second_line_point.z = 0.0
        marker.points.append(second_line_point)

        center_pub.publish(marker)

    curvature = sma.process(curvature)
    if max_speed < min_speed:
        pred_speed = max_speed
    elif curvature > max_curvature:
        pred_speed = min_speed
    else:
        pred_speed = curvature * (min_speed - max_speed) / max_curvature + max_speed

    speed_diff = act_speed - pred_speed
    time_diff = time.time() - time_last_speed
    pub_speed = act_speed
    if speed_diff > 0:
        if abs(speed_diff / time_diff) > max_deceleration:
            pub_speed -= max_deceleration * time_diff
        else:
            pub_speed = pred_speed
    else:
        if abs(speed_diff / time_diff) > max_acceleration:
            pub_speed += max_acceleration * time_diff
        else:
            pub_speed = pred_speed

    time_last_speed = time.time()

    if atan2(c_y, x_shifted(c_x)) - theta > 0:
        c_dist = -c_dist

    heading_offset_pub.publish(-theta)
    position_offset_pub.publish(c_dist)
    speed_pub.publish(pub_speed)
    curvature_pub.publish(curvature)

def max_speed_callback(msg):
    global max_speed
    max_speed = msg.data

def act_speed_callback(msg):
    global act_speed
    act_speed = msg.data

def set_if_reconfigured(config):
    for it in config.keys():
        if it is 'groups':
            continue
        if globals()[it] != config[it]:
            globals()[it] = config[it]
            rospy.loginfo("%s new value is %f",it , config[it])

def reconfigureCB(config, level):
    set_if_reconfigured(config)
    return config

if __name__ == '__main__':
    rospy.init_node('extract_road_features')

    road_markings_sub = rospy.Subscriber('road_markings',
                                         RoadMarkings,
                                         road_markings_callback,
                                         queue_size=1)

    max_speed_sub = rospy.Subscriber('max_speed',
                                     Float64,
                                     max_speed_callback,
                                     queue_size=1)

    act_speed_sub = rospy.Subscriber('stm32/speed',
                                     Float32,
                                     act_speed_callback,
                                     queue_size=1)

    global lookahead
    lookahead = rospy.get_param('~lookahead', 0.0)
    global min_speed
    min_speed = rospy.get_param('~min_speed', 0.5)
    global max_curvature
    max_curvature = rospy.get_param('~max_curvature', 1.8)
    window_size = rospy.get_param('~average_window_size', 10)
    global max_acceleration
    max_acceleration = rospy.get_param('~max_acceleration', 1.0)
    global max_deceleration
    max_deceleration = rospy.get_param('~max_deceleration', 1.0)

    print("lookahead set to: " + str(lookahead))
    print("min_speed set to: " + str(min_speed))
    print("max_speed set to: " + str(max_speed))
    print("max_acceleration set to: " + str(max_acceleration))
    print("max_deceleration set to: " + str(max_deceleration))
    print("max_curvature set to: " + str(max_curvature))
    print("average_window_size set to: " + str(window_size))

    dr_srv = Server(ExtractRoadFeaturesConfig, reconfigureCB)

    global sma
    sma = StreamingMovingAverage(window_size)

    global sma_x
    sma_x = StreamingMovingAverage(50)

    global sma_y
    sma_y = StreamingMovingAverage(50)

    global heading_offset_pub, position_offset_pub, curvature_pub, center_pub
    heading_offset_pub = rospy.Publisher(
        'heading_offset', Float64, queue_size=1)
    position_offset_pub = rospy.Publisher(
        'position_offset', Float64, queue_size=1)
    speed_pub = rospy.Publisher('speed', Float64, queue_size=1)

    curvature_pub = rospy.Publisher('curvature', Float64, queue_size=1)

    center_pub = rospy.Publisher("CoC", Marker,  queue_size=1)

    rospy.spin()
