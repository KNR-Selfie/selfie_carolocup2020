#!/usr/bin/env python
'''
*Copyright ( c ) 2019, KNR Selfie
*This code is licensed under BSD license (see LICENSE for details)
'''

#!/usr/bin/env python
from __future__ import print_function

import roslib
import sys
import rospy
import cv2
import numpy as np
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

TOPVIEW_COLS = 640
TOPVIEW_ROWS = 197

TOPVIEW_MIN_X = 0.3
TOPVIEW_MAX_X = 1.1
TOPVIEW_MIN_Y = -1.3
TOPVIEW_MAX_Y = 1.3

global only_once
only_once = True

class image_converter:

  def __init__(self):
    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("image_rect",Image,self.callback)

  def callback(self,data):
    global config_file, yaml_output_file, jpg_output_file, only_once
    if only_once:
      world2cam = np.zeros((3, 3, 1), dtype = "double")
      try:
        cv_image = self.bridge.imgmsg_to_cv2(data, "mono8")
      except CvBridgeError as e:
        print(e)

      fs = cv2.FileStorage(config_file, cv2.FILE_STORAGE_READ)
      world2cam = fs.getNode("world2cam")

      topview_size = np.uint32([TOPVIEW_COLS, TOPVIEW_ROWS])
      pixels = np.float32([[topview_size[0], topview_size[1]],
                           [0, topview_size[1]],
                           [topview_size[0], 0],
                           [0, 0]])
      coordinates = np.float32([[TOPVIEW_MIN_X, TOPVIEW_MIN_Y],
                               [TOPVIEW_MIN_X, TOPVIEW_MAX_Y],
                               [TOPVIEW_MAX_X, TOPVIEW_MIN_Y],
                               [TOPVIEW_MAX_X, TOPVIEW_MAX_Y]])

      topview2world, mask = cv2.findHomography(pixels, coordinates)

      world2topview = cv2.invert(topview2world)

      topview2cam_ = world2cam.mat().dot(topview2world)

      homography = cv2.warpPerspective(cv_image, topview2cam_, (topview_size[0], topview_size[1]), flags=cv2.INTER_CUBIC | cv2.WARP_INVERSE_MAP)

      ret,thresh = cv2.threshold(homography,0,255,cv2.THRESH_BINARY_INV)

      fs_write = cv2.FileStorage(yaml_output_file, cv2.FILE_STORAGE_WRITE)
      fs_write.write("mat", thresh)
      fs_write.release()

      cv2.imwrite(jpg_output_file, thresh)
      print("Operation completed")
      only_once = False

def main(args):
  ic = image_converter()
  rospy.init_node('homcut_maker', anonymous=True)
  global config_file
  config_file = rospy.get_param('~config_file', "")
  global yaml_output_file
  yaml_output_file = rospy.get_param('~yaml_output_file', "")
  global jpg_output_file
  jpg_output_file = rospy.get_param('~jpg_output_file', "")

  print("homography_file: ")
  print(config_file)
  print("yaml_output_file: ")
  print(yaml_output_file)
  print("jpg_output_file: ")
  print(jpg_output_file)

  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)